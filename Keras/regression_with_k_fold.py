# -*- coding: utf-8 -*-
"""Regression_with_K_fold.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1g9joP7-sVALZgyiVM45p_OUTwQN1syso
"""

from keras.datasets import boston_housing

(x_train, y_train) , (x_test, y_test) = boston_housing.load_data()

# preprocess the data a bit

import numpy as np


mean = np.mean(x_train, axis = 0)
std = np.std(x_train, axis = 0)

x_train -= mean
x_test -= mean

x_train/=std
x_test/=std

#x_train[0]
x_train.shape

# build a model function
from keras import models
from keras import layers

# mae == mean absolute error

def build_model():
  model = models.Sequential()
  model.add( layers.Dense(64, activation='relu', input_shape = (13,)))
  model.add(layers.Dense(32, activation='relu'))
  model.add(layers.Dense(1, activation='relu'))
  model.compile(optimizer='rmsprop', loss='mse', metrics=['mae'])
  return model

# K fold stuff

K = 5
total_data = x_train.shape[0]

one_fold =  round(total_data / K)

mae_hist = []

print(one_fold)

for i in range(K-1):
  # 1 folded testing data 
  val_data = x_train[i * one_fold : (i+1) * one_fold]
  val_label = y_train[i * one_fold : (i+1) * one_fold]
  
  train_data  = np.concatenate( [x_train[0: i*one_fold] , x_train[(i+1)*one_fold :]], axis = 0) 
  train_label = np.concatenate( [y_train[0: i*one_fold] , y_train[(i+1)*one_fold :]], axis = 0)
  
  model = build_model()
  
  history = model.fit(train_data, train_label, batch_size= 1, epochs= 20, validation_data=(val_data, val_label), verbose = 0)
  
  mae = history.history['val_mean_absolute_error']
  mae_hist.append(mae)
  
  
mae_hist[0]
#avg_mae = [ np.mean([x[i] for x in mae_hist]) for i in range(20)]

avg_mae = [ np.mean([x[i] for x in mae_hist]) for i in range(20)]

import matplotlib.pyplot as plt

iterations = range( 1 , 21)
plt.plot( avg_mae, iterations, 'b', 'Mean absolute error')
plt.ylabel('MAE')
plt.xlabel('Epochs')
plt.legend()
plt.show()

